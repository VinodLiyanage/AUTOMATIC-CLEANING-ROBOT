
204116V-lcdlib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000002a2  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c56  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ab  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000703  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000027ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  7a:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
#include "lcdlib.h"

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA_PORT = cmd;
  82:	88 bb       	out	0x18, r24	; 24
	
	REGISTER_SELECT_LOW(); 
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8f 7b       	andi	r24, 0xBF	; 191
  88:	8b bb       	out	0x1b, r24	; 27
	ENABLE_HIGH(); 
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	97 e0       	ldi	r25, 0x07	; 7
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_cmd+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <LCD_cmd+0x18>
  9a:	00 00       	nop
	_delay_ms(1);
	ENABLE_LOW();
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	8f 7d       	andi	r24, 0xDF	; 223
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret

000000a4 <LCD_init>:
}

void LCD_init()
{
	LCD_DATA_DDR = 0xff;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	87 bb       	out	0x17, r24	; 23
	LCD_CONTROL_DDR |= (1 << REGISTER_SELECT) | (1 << ENABLE_SIGNAL);
  a8:	8a b3       	in	r24, 0x1a	; 26
  aa:	80 66       	ori	r24, 0x60	; 96
  ac:	8a bb       	out	0x1a, r24	; 26
	
	LCD_cmd(0x38); _delay_ms(2);
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  b4:	8f e9       	ldi	r24, 0x9F	; 159
  b6:	9f e0       	ldi	r25, 0x0F	; 15
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_init+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_init+0x1a>
  be:	00 00       	nop
	LCD_cmd(0x02); _delay_ms(2);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  c6:	8f e9       	ldi	r24, 0x9F	; 159
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_init+0x26>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_init+0x2c>
  d0:	00 00       	nop
	LCD_cmd(0x01); _delay_ms(2);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_init+0x38>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_init+0x3e>
  e2:	00 00       	nop
	LCD_cmd(0x0c); _delay_ms(2);
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_init+0x4a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_init+0x50>
  f4:	00 00       	nop
	LCD_cmd(0x06); _delay_ms(2);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  fc:	8f e9       	ldi	r24, 0x9F	; 159
  fe:	9f e0       	ldi	r25, 0x0F	; 15
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_init+0x5c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_init+0x62>
 106:	00 00       	nop
	LCD_cmd(0x80); _delay_ms(2);
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 10e:	8f e9       	ldi	r24, 0x9F	; 159
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_init+0x6e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_init+0x74>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <setPosition>:
}

void setPosition(unsigned char pos_x, unsigned char pos_y)
{
	if(pos_x < 1 || pos_x > 16 || pos_y < 1 || pos_y > 2)
 11c:	9f ef       	ldi	r25, 0xFF	; 255
 11e:	98 0f       	add	r25, r24
 120:	90 31       	cpi	r25, 0x10	; 16
 122:	28 f4       	brcc	.+10     	; 0x12e <setPosition+0x12>
 124:	66 23       	and	r22, r22
 126:	31 f0       	breq	.+12     	; 0x134 <setPosition+0x18>
 128:	63 30       	cpi	r22, 0x03	; 3
 12a:	38 f4       	brcc	.+14     	; 0x13a <setPosition+0x1e>
 12c:	08 c0       	rjmp	.+16     	; 0x13e <setPosition+0x22>
	{
		pos_x = 1;
		pos_y = 1;
 12e:	61 e0       	ldi	r22, 0x01	; 1

void setPosition(unsigned char pos_x, unsigned char pos_y)
{
	if(pos_x < 1 || pos_x > 16 || pos_y < 1 || pos_y > 2)
	{
		pos_x = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	05 c0       	rjmp	.+10     	; 0x13e <setPosition+0x22>
		pos_y = 1;
 134:	61 e0       	ldi	r22, 0x01	; 1

void setPosition(unsigned char pos_x, unsigned char pos_y)
{
	if(pos_x < 1 || pos_x > 16 || pos_y < 1 || pos_y > 2)
	{
		pos_x = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	02 c0       	rjmp	.+4      	; 0x13e <setPosition+0x22>
		pos_y = 1;
 13a:	61 e0       	ldi	r22, 0x01	; 1

void setPosition(unsigned char pos_x, unsigned char pos_y)
{
	if(pos_x < 1 || pos_x > 16 || pos_y < 1 || pos_y > 2)
	{
		pos_x = 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
		pos_y = 1;
	}
	
	LCD_cmd(0x3f + pos_x + (pos_y * 64));
 13e:	90 e4       	ldi	r25, 0x40	; 64
 140:	69 9f       	mul	r22, r25
 142:	80 0d       	add	r24, r0
 144:	11 24       	eor	r1, r1
 146:	81 5c       	subi	r24, 0xC1	; 193
 148:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 14c:	08 95       	ret

0000014e <LCD_out>:
}

void LCD_out(char ch)
{
	LCD_DATA_PORT = ch;
 14e:	88 bb       	out	0x18, r24	; 24
	REGISTER_SELECT_HIGH();
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	80 64       	ori	r24, 0x40	; 64
 154:	8b bb       	out	0x1b, r24	; 27
	ENABLE_HIGH();
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	8b bb       	out	0x1b, r24	; 27
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_out+0x12>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_out+0x18>
 166:	00 00       	nop
	_delay_ms(1);
	ENABLE_LOW();
 168:	8b b3       	in	r24, 0x1b	; 27
 16a:	8f 7d       	andi	r24, 0xDF	; 223
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	08 95       	ret

00000170 <LCD_write_char>:
}

void LCD_write_char(char ch, unsigned char pos_x, unsigned char pos_y)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
 174:	86 2f       	mov	r24, r22
	setPosition(pos_x, pos_y);
 176:	64 2f       	mov	r22, r20
 178:	0e 94 8e 00 	call	0x11c	; 0x11c <setPosition>
	
	LCD_DATA_PORT = ch;
 17c:	c8 bb       	out	0x18, r28	; 24
	REGISTER_SELECT_HIGH();
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b bb       	out	0x1b, r24	; 27
	ENABLE_HIGH();
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	80 62       	ori	r24, 0x20	; 32
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	8f ec       	ldi	r24, 0xCF	; 207
 18c:	97 e0       	ldi	r25, 0x07	; 7
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_write_char+0x1e>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_write_char+0x24>
 194:	00 00       	nop
    _delay_ms(1);
	ENABLE_LOW();
 196:	8b b3       	in	r24, 0x1b	; 27
 198:	8f 7d       	andi	r24, 0xDF	; 223
 19a:	8b bb       	out	0x1b, r24	; 27
}
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <LCD_write_string>:

void LCD_write_string(char *st, unsigned char pos_x, unsigned char pos_y)
{
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	8c 01       	movw	r16, r24
 1a8:	86 2f       	mov	r24, r22
	
	unsigned char i;
	
	setPosition(pos_x, pos_y);
 1aa:	64 2f       	mov	r22, r20
 1ac:	0e 94 8e 00 	call	0x11c	; 0x11c <setPosition>
	
	i = 0;
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
	while(st[i] != '\0')
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <LCD_write_string+0x1a>
	{
		LCD_out(st[i]);
 1b4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_out>
		i++;
 1b8:	cf 5f       	subi	r28, 0xFF	; 255
	unsigned char i;
	
	setPosition(pos_x, pos_y);
	
	i = 0;
	while(st[i] != '\0')
 1ba:	f8 01       	movw	r30, r16
 1bc:	ec 0f       	add	r30, r28
 1be:	f1 1d       	adc	r31, r1
 1c0:	80 81       	ld	r24, Z
 1c2:	81 11       	cpse	r24, r1
 1c4:	f7 cf       	rjmp	.-18     	; 0x1b4 <LCD_write_string+0x14>
	{
		LCD_out(st[i]);
		i++;
	}
}
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <LCD_write_number>:

unsigned char LCD_write_number(unsigned char number, unsigned char pos_x, unsigned char pos_y, char zfill)
{
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	36 2f       	mov	r19, r22
 1dc:	c2 2f       	mov	r28, r18
	long temp, i;
	if(number == 0) 
 1de:	81 11       	cpse	r24, r1
 1e0:	1a c0       	rjmp	.+52     	; 0x216 <LCD_write_number+0x48>
	{
		setPosition(pos_x, pos_y);
 1e2:	64 2f       	mov	r22, r20
 1e4:	83 2f       	mov	r24, r19
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <setPosition>
		for(i = 0; i<zfill; i++) LCD_out(0x30); // ascii value of 0 = 48(Dec) or 0x30(Hex)
 1ea:	c1 2c       	mov	r12, r1
 1ec:	d1 2c       	mov	r13, r1
 1ee:	76 01       	movw	r14, r12
 1f0:	08 c0       	rjmp	.+16     	; 0x202 <LCD_write_number+0x34>
 1f2:	80 e3       	ldi	r24, 0x30	; 48
 1f4:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_out>
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	c8 1a       	sub	r12, r24
 1fc:	d8 0a       	sbc	r13, r24
 1fe:	e8 0a       	sbc	r14, r24
 200:	f8 0a       	sbc	r15, r24
 202:	8c 2f       	mov	r24, r28
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	a0 e0       	ldi	r26, 0x00	; 0
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	c8 16       	cp	r12, r24
 20c:	d9 06       	cpc	r13, r25
 20e:	ea 06       	cpc	r14, r26
 210:	fb 06       	cpc	r15, r27
 212:	7c f3       	brlt	.-34     	; 0x1f2 <LCD_write_number+0x24>
 214:	1a c0       	rjmp	.+52     	; 0x24a <LCD_write_number+0x7c>
		return 0;
	}
	temp = number % 10;
 216:	9d ec       	ldi	r25, 0xCD	; 205
 218:	89 9f       	mul	r24, r25
 21a:	91 2d       	mov	r25, r1
 21c:	11 24       	eor	r1, r1
 21e:	d9 2f       	mov	r29, r25
 220:	d6 95       	lsr	r29
 222:	d6 95       	lsr	r29
 224:	d6 95       	lsr	r29
 226:	dd 0f       	add	r29, r29
 228:	2d 2f       	mov	r18, r29
 22a:	22 0f       	add	r18, r18
 22c:	22 0f       	add	r18, r18
 22e:	d2 0f       	add	r29, r18
 230:	8d 1b       	sub	r24, r29
 232:	d8 2f       	mov	r29, r24
	LCD_write_number(number / 10, pos_x, pos_y, zfill);
 234:	2c 2f       	mov	r18, r28
 236:	89 2f       	mov	r24, r25
 238:	86 95       	lsr	r24
 23a:	86 95       	lsr	r24
 23c:	86 95       	lsr	r24
 23e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_write_number>
	LCD_out(temp + 48);
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	8d 0f       	add	r24, r29
 246:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_out>
	return 0;
}
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	08 95       	ret

0000025a <main>:

#include "lcdlib.h"

int main(void)
{
	LCD_init();
 25a:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_init>
	
	LCD_write_string("MODE:G", 1, 1);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	80 e6       	ldi	r24, 0x60	; 96
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_write_string>
	LCD_write_string("CONTROL:A", 8, 1);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	68 e0       	ldi	r22, 0x08	; 8
 26e:	87 e6       	ldi	r24, 0x67	; 103
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_write_string>
	LCD_write_string("BATTERY: ", 1, 2);
 276:	42 e0       	ldi	r20, 0x02	; 2
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e7       	ldi	r24, 0x71	; 113
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_write_string>
	LCD_write_number(100, 10, 2, 0);
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	42 e0       	ldi	r20, 0x02	; 2
 286:	6a e0       	ldi	r22, 0x0A	; 10
 288:	84 e6       	ldi	r24, 0x64	; 100
 28a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCD_write_number>
	LCD_write_char('%', 13, 2);
 28e:	42 e0       	ldi	r20, 0x02	; 2
 290:	6d e0       	ldi	r22, 0x0D	; 13
 292:	85 e2       	ldi	r24, 0x25	; 37
 294:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_write_char>
}
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
